{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//Definimos el state inicial: a qui sera un objeto llamado\n//\"weatherInformation\" que esta vacio. El reducer se asegurara\n//de chequear la accion que recibe, si coincide con el type que\n//espera, va a modificar el state con la info que contenga el \n//payload de la action\nvar initialState = {\n  weatherInformation: {}\n}; //Creamos el reducer, recibe el state inicial y una action\n\nvar weatherInfo = function weatherInfo() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  //si esa accion coincide con el nombre \"FETCH_WEATHER\"\n  //El objeto vacio llamado weatherInformation que integra el\n  //state se va a llenar con la info que trae el payload de la action\n  if (action.type === 'FETCH_WEATHER') {\n    state = _objectSpread(_objectSpread({}, state), {}, {\n      weatherInformation: action.payload\n    }); //Al final devolvemos el state ya actualizado\n  }\n\n  return state;\n};\n\nexport default weatherInfo;","map":{"version":3,"sources":["/Users/andresnieves/Documents/React/project-libra/redux/reducers/weatherReducer.js"],"names":["initialState","weatherInformation","weatherInfo","state","action","type","payload"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA,IAAMA,YAAY,GAAG;AACjBC,EAAAA,kBAAkB,EAAE;AADH,CAArB,C,CAIE;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;;AACpD;AACA;AACA;AACA,MAAGA,MAAM,CAACC,IAAP,KAAgB,eAAnB,EAAmC;AAC/BF,IAAAA,KAAK,mCAAOA,KAAP;AAAcF,MAAAA,kBAAkB,EAAEG,MAAM,CAACE;AAAzC,MAAL,CAD+B,CAEnC;AACC;;AAAC,SAAOH,KAAP;AACH,CARD;;AAUA,eAAeD,WAAf","sourcesContent":["//Definimos el state inicial: a qui sera un objeto llamado\n//\"weatherInformation\" que esta vacio. El reducer se asegurara\n//de chequear la accion que recibe, si coincide con el type que\n//espera, va a modificar el state con la info que contenga el \n//payload de la action\nconst initialState = {\n    weatherInformation: {}\n  }\n  \n  //Creamos el reducer, recibe el state inicial y una action\n  const weatherInfo = (state = initialState, action) => {\n    //si esa accion coincide con el nombre \"FETCH_WEATHER\"\n    //El objeto vacio llamado weatherInformation que integra el\n    //state se va a llenar con la info que trae el payload de la action\n    if(action.type === 'FETCH_WEATHER'){\n        state = {...state, weatherInformation: action.payload}\n    //Al final devolvemos el state ya actualizado\n    } return state;\n  }\n  \n  export default weatherInfo;"]},"metadata":{},"sourceType":"module"}